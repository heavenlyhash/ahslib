NEW PLAN!

It's all about events -- both ways.
Part of what I mean by that is that we should avoid putting actually logic in the javascript as much as possible.  Animations are okay; that's about it.  Even those should be triggered by an indirection through the java applet, though -- never directly from other javascript on a button.

We interact with the world through commands.  It's a forgone revelation that for true power we need to access javascript eval functionality; now we're just making it even more official.
Our favored interface now does not expose eval(String...) directly.  It exposes execute(Command) instead.
The Command interface (which might be renamed something more specific to js and directional) pretty much just exposes a method to get a String which can be eval'd.
However, it provides a critical layer of indirection: We can now make Command factories!
So we can have 
a Factory for page redirection commands...
a Factory for making a command that inserts new elements into the DOM...
a Factory for making any named element of the DOM into a button that when clicked feeds a named event back to the applet...
and shazam -- that's how it goes full circle.  That named event feedback can then trigger 
another Factory that makes the page redirect happen...
or it can trigger a Factory that makes an animation script and attaches it to another named element of the DOM.

And at the end of the day, we can fit most of the common functionality into a bunch of factory-pattern methods in a facade class.
(Making a bunch of Factory classes nested in an interface might be prettier, but it would also imply a lot of short lived objects, so whether or not that's a good idea at the end of the day is up for debate.  Spose you could let the fields on those be public, too, so if some client of the library is ever strangely obsessive about it they can just pool an object and reuse it.  Then again, it's not like the Command instances aren't pretty short lived anyway.)
		(Oh my GOD eric, go back and read that nice paper again about have java malloc and release can actually be faster than C for shortlived objects, and then stop worrying about it.)
Clients of the library can easily make any new Command by implementing the interface and composing their own string of JS, and possibly by composition of other Command (maybe -- needs more thought).

It -might- behoove us to make this interface do some fancier things like claim IDs and event names to try to give us more safety checks during runtime that make it easier to catch problems in java exceptions instead of bizzare javascript actions.
However, it would be inherently a trust-based system and the DOM ID claiming process could fall out of sync with the real DOM incredibly easily.


